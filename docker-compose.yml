version: '3'

# Airflow 공통 설정 (services 밖에 위치)
x-airflow-common: &airflow-common
  build: 
    context: ./
    dockerfile: ./services/airflow/Dockerfile
    args:
        # .env 파일에서 DOCKER_GID 값을 빌드 인수로 전달
        DOCKER_GID: ${DOCKER_GID}
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres-airflow/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres-airflow/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__CORE__DEFAULT_TIMEZONE: Asia/Seoul
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    JAVA_HOME: /usr/lib/jvm/default-java
    # 이메일 설정 환경 변수
    AIRFLOW__SMTP__SMTP_HOST: smtp.gmail.com
    AIRFLOW__SMTP__SMTP_PORT: 587
    AIRFLOW__SMTP__SMTP_USER: ${AIRFLOW_SMTP_USER}
    AIRFLOW__SMTP__SMTP_PASSWORD: ${AIRFLOW_SMTP_PASSWORD}
    AIRFLOW__SMTP__SMTP_MAIL_FROM: ${AIRFLOW_SMTP_MAIL_FROM}
    # Anthropic API 키
    ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
    # Hadoop 관련 환경 변수 추가
    HADOOP_CONF_DIR: /opt/hadoop/conf
    HADOOP_HOME: /opt/hadoop
    AIRFLOW_CONN_HDFS_DEFAULT: 'hdfs://namenode:9000'
  volumes:
    - ./src/batch/dags:/opt/airflow/dags
    - ./src/batch/logs:/opt/airflow/logs
    - ./src/batch/config:/opt/airflow/config
    - ./src/batch/plugins:/opt/airflow/plugins
    - ./src/batch/dags/scripts:/opt/airflow/dags/scripts
    - ./src/batch/data:/opt/airflow/data
    - ./src/batch/output:/opt/airflow/output
    # Hadoop 설정 파일 마운트 추가
    - ./services/hadoop/conf:/opt/hadoop/conf
    # airflow 컨테이너에서 docker 명령어 실행 가능하도록 설정
    - /var/run/docker.sock:/var/run/docker.sock
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on: &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres-airflow:
      condition: service_healthy
  networks:
    - airflow

services:
  postgres:
    build: ./services/postgres
    container_name: postgres
    environment:
      POSTGRES_DB: news
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5437:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USERNAME}"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - airflow

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - airflow

  kafka:
    build: 
      context: ./
      dockerfile: ./services/kafka/Dockerfile
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_CFG_BROKER_ID: 1
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,PLAINTEXT_HOST://:29092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    working_dir: /opt/workspace
    volumes:
      - type: bind
        source: ./src/kafka_producer
        target: /opt/workspace/kafka_producer
      - type: bind
        source: ./src/up_ingest_codes/article_extractors.py
        target: /opt/workspace/article_extractors.py
      - type: bind
        source: ./.env
        target: /opt/workspace/.env
    depends_on:
      - zookeeper
    networks:
      - airflow

  flink:
      build: 
        context: ./
        dockerfile: ./services/flink/Dockerfile
      container_name: flink
      ports:
        - "8081:8081"
      working_dir: /opt/workspace
      volumes:
        - type: bind
          source: ./src/flink_consumer
          target: /opt/workspace/flink_consumer
        - type: bind
          source: ./services/flink/config
          target: /opt/flink/lib
        - type: bind
          source: ./src/batch/data/realtime
          target: /opt/batch/data/realtime
      env_file:
        - ./.env  # 환경 변수 파일로 사용
      environment:
        - KAFKA_CONNECTOR_PATH=/opt/flink/lib/flink-sql-connector-kafka-3.3.0-1.20.jar
      depends_on:
        - kafka
        - postgres
      tty: true
      networks:
        - airflow
  
  django:
    build:
      context: ./
      dockerfile: ./services/django/Dockerfile
    container_name: django
    ports:
      - "8000:8000"
    volumes:
      - type: bind
        source: ./src/vue_django_codes/news_backend
        target: /app
      - type: bind
        source: ./.env
        target: /app/.env
      - type: bind
        source: ./services/django/local_settings.py
        target: /app/news_backend/local_settings.py
      - type: bind
        source: ./services/django/setup.sh
        target: /app/setup.sh
    env_file:
      - ./.env  # 환경 변수 파일로 사용
    environment:
      - DB_HOST=postgres
      - DB_NAME=news
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8000/admin" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    restart: always
    networks:
      - airflow
  
  vue:
    build:
      context: ./
      dockerfile: ./services/vue/Dockerfile
    container_name: vue
    ports:
      - "3000:3000"  # Vite 개발 서버 포트
    volumes:
      - type: bind
        source: ./src/vue_django_codes/news_front
        target: /app
      - vue_node_modules:/app/node_modules
    environment:
      - VITE_BASE_URL=http://localhost:8000
    depends_on:
      django:
        condition: service_healthy
    networks:
      - airflow

  # Airflow 관련 서비스 추가
  postgres-airflow:
    image: postgres:13
    container_name: postgres-airflow
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5433:5432"
    volumes:
      - pg_for_airflow:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - airflow

  redis:
    image: redis:7.2-bookworm
    container_name: redis
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - airflow

  # Spark Master-Worker 아키텍처로 변경 및 Hadoop 연동 설정 추가
  spark-master:
    build:
      context: ./
      dockerfile: ./services/spark_cluster/Dockerfile
    container_name: spark-master
    ports:
      - "8083:8080"  # Spark Master Web UI
      - "7077:7077"  # Spark Master 통신 포트
    environment:
      - SPARK_MODE=master
      # Hadoop 연결을 위한 환경 변수 추가
      - HADOOP_CONF_DIR=/opt/hadoop/conf
      - HADOOP_HOME=/opt/hadoop
    volumes:
      - ./src/batch/dags/scripts:/opt/bitnami/spark/scripts
      - ./src/batch/data:/opt/bitnami/spark/data
      - ./src/batch/output:/opt/bitnami/spark/output
      # Hadoop 설정 파일 마운트 추가
      - ./services/hadoop/conf:/opt/hadoop/conf
    depends_on:
      namenode:
        condition: service_healthy
      resourcemanager:
        condition: service_started
    networks:
      - airflow

  spark-worker:
    build:
      context: ./
      dockerfile: ./services/spark_cluster/Dockerfile
    container_name: spark-worker
    ports:
      - "8084:8081"  # Spark Worker Web UI
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      # Hadoop 연결을 위한 환경 변수 추가
      - HADOOP_CONF_DIR=/opt/hadoop/conf
      - HADOOP_HOME=/opt/hadoop
    volumes:
      - ./src/batch/dags/scripts:/opt/bitnami/spark/scripts
      - ./src/batch/data:/opt/bitnami/spark/data
      - ./src/batch/output:/opt/bitnami/spark/output
      # Hadoop 설정 파일 마운트 추가
      - ./services/hadoop/conf:/opt/hadoop/conf
    depends_on:
      - spark-master
      - namenode
      - datanode
    networks:
      - airflow

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    environment:
      <<: *airflow-common-env
      _AIRFLOW_WWW_USER_USERNAME: airflow
      _AIRFLOW_WWW_USER_PASSWORD: airflow
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
      spark-master:
        condition: service_started
      namenode:
        condition: service_healthy
    networks:
      - airflow
  
  # airflow에서 bashoperator로 docker 명령어 실행 가능하도록 설정하고 종료되는 컨테이너임
  airflow-docker-setup:
    <<: *airflow-common
    container_name: airflow-docker-setup
    user: "root:0"
    command: >
      bash -c "
      DOCKER_GID=$$(stat -c '%g' /var/run/docker.sock) &&
      groupadd -f -g $$DOCKER_GID docker &&
      usermod -aG docker airflow &&
      chmod 666 /var/run/docker.sock"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      airflow-webserver:
        condition: service_healthy
    restart: "no"
    networks:
      - airflow
  
  # airflow에서 사용하는 커넥션 설정을 초기화하는 컨테이너임
  airflow-connections-setup:
    <<: *airflow-common
    container_name: airflow-connections-setup
    command: >
      bash -c "
      sleep 60 &&
      airflow connections delete spark_default || true &&
      airflow connections delete webhdfs_default || true &&
      airflow connections add spark_default --conn-type spark --conn-host spark-master --conn-port 7077 --conn-extra '{\"deploy-mode\": \"client\"}' &&
      airflow connections add webhdfs_default --conn-type webhdfs --conn-host namenode --conn-port 9870 --conn-login hadoop --conn-extra '{\"use_ssl\": false}'"
    depends_on:
      airflow-webserver:
        condition: service_healthy
    restart: "no"

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
      namenode:
        condition: service_healthy
    networks:
      - airflow

  airflow-worker:
    <<: *airflow-common
    container_name: airflow-worker
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
      namenode:
        condition: service_healthy
    networks:
      - airflow

  airflow-triggerer:
    <<: *airflow-common
    container_name: airflow-triggerer
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - airflow

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID:-50000}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ./src/batch:/sources
    networks:
      - airflow

  flower:
    <<: *airflow-common
    container_name: flower
    command: celery flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - airflow

  # Elasticsearch, Kibana 서비스 추가
  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.1
    container_name: es01
    environment:
      - node.name=es01
      - cluster.name=elastic-docker-cluster

      ## 3개의 노드 실행 시
      # - discovery.seed_hosts=es02,es03
      # - cluster.initial_master_nodes=es01,es02,es03
      
      # 노드 하나만 실행 시
      # - discovery.seed_hosts=es01
      - cluster.initial_master_nodes=es01

      - node.roles=master,data,ingest
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - network.host=0.0.0.0
    volumes:
      - ./src/elasticsearch/config/dictionary:/usr/share/elasticsearch/config/dictionary
    ports:
      - 9200:9200
    networks:
      - airflow
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
      redis:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      sh -c "
      if [ ! -d /usr/share/elasticsearch/plugins/analysis-nori ]; then
        elasticsearch-plugin install analysis-nori --batch;
      fi &&
      exec /usr/local/bin/docker-entrypoint.sh elasticsearch"

  kibana:
    image: docker.elastic.co/kibana/kibana:8.17.1
    container_name: kibana
    depends_on:
      es01:
        condition: service_healthy
    environment:
      - SERVER_NAME=kibana
      - ELASTICSEARCH_HOSTS=http://es01:9200
      - XPACK_ALERTING_ENABLED=false
      - XPACK_ACTIONS_ENABLED=false
      - XPACK_RULE_REGISTRY_WRITE_ENABLED=false
      - TELEMETRY_ENABLED=false
      - XPACK_SECURITY_SOLUTION_ENABLED=false
      - XPACK_INFRA_ENABLED=false
      - XPACK_LOGS_ENABLED=false
      - XPACK_ALERTING_ENABLED=false
      - XPACK_APM_ENABLED=false
      - XPACK_FLEET_ENABLED=false
      - XPACK_OBSERVABILITY_ENABLED=false
      - XPACK_REPORTING_ENABLED=false
      - XPACK_ML_ENABLED=false
      - TELEMETRY_ENABLED=false
      - MONITORING_ENABLED=false
    ports:
      - 5601:5601
    networks:
      - airflow

  logstash01:
    container_name: logstash01
    depends_on:
      es01:
        condition: service_healthy 
      postgres:
        condition: service_healthy
    image: docker.elastic.co/logstash/logstash-oss:8.17.1
    labels:
      co.elastic.logs/module: logstash
    user: root
    volumes:
      - type: bind
        source: ./src/logstash/data
        target: /usr/share/logstash/data
      - type: bind
        source: ./src/logstash/stash_news_db.conf
        target: /usr/share/logstash/pipeline/stash_news_db.conf
    environment:
      - ELASTIC_USER=${DB_USER}
      - ELASTIC_PASSWORD=${DB_PASSWORD}
      - ELASTIC_HOSTS=http://es01:9200
      - DB_USERNAME=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
    # command에서 JDBC 드라이버 다운로드 후 Logstash 실행 (stash_news_db.conf 사용)
    command: >
      sh -c 'mkdir -p /usr/share/logstash/ingest_data &&
             curl -L -o /usr/share/logstash/ingest_data/postgresql.jar https://jdbc.postgresql.org/download/postgresql-42.5.0.jar &&
             chmod 644 /usr/share/logstash/ingest_data/postgresql.jar &&
             /usr/share/logstash/bin/logstash -f /usr/share/logstash/pipeline/stash_news_db.conf'
    networks:
      - airflow
  
  # Hadoop 서비스 추가
  namenode:
    image: apache/hadoop:3
    hostname: namenode
    container_name: namenode
    command: >
      sh -c "
      chmod +x /opt/entrypoint.sh &&
      /opt/entrypoint.sh
      "
    ports:
      - 9870:9870
      - 9000:9000
    env_file:
      - ./services/hadoop/.config
    volumes:
      - ./services/hadoop/entrypoint.sh:/opt/entrypoint.sh
      - namenode_data:/tmp/hadoop-root/dfs/name
    user: "root"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:9870" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - airflow

  datanode:
    image: apache/hadoop:3
    container_name: datanode
    command: >
      sh -c "
      mkdir -p /tmp/hadoop-root/dfs/data &&
      chown hadoop:hadoop /tmp/hadoop-root/dfs/data &&
      chmod 755 /tmp/hadoop-root/dfs/data &&
      hdfs datanode
      "
    env_file:
      - ./services/hadoop/.config
    volumes:
      - datanode_data:/tmp/hadoop-root/dfs/data  # 경로 수정
    user: "root"
    depends_on:
      namenode:
        condition: service_healthy
    networks:
      - airflow

  resourcemanager:
    image: apache/hadoop:3
    hostname: resourcemanager
    container_name: resourcemanager
    command: ["yarn", "resourcemanager"]
    ports:
      - 8088:8088
    env_file:
      - ./services/hadoop/.config
    volumes:
      - ./services/hadoop/test.sh:/opt/test.sh
    depends_on:
      namenode:
        condition: service_healthy
    networks:
      - airflow

  nodemanager:
    image: apache/hadoop:3
    container_name: nodemanager
    command: ["yarn", "nodemanager"]
    env_file:
      - ./services/hadoop/.config
    depends_on:
      resourcemanager:
        condition: service_started
      datanode:
        condition: service_started
    networks:
      - airflow

volumes:
  pgdata:
  pg_for_airflow:
  ubuntu_workspace:
  vue_node_modules:
  namenode_data:
  datanode_data:

networks:
  airflow:
    driver: bridge